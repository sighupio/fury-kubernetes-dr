# Copyright (c) 2020 SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

name: license
kind: pipeline
type: docker

steps:
  - name: check
    image: docker.io/library/golang:1.16
    pull: always
    commands:
      - go get -u github.com/google/addlicense
      - addlicense -c "SIGHUP s.r.l" -v -l bsd --check .
---
name: policeman
kind: pipeline
type: docker

depends_on:
  - license

platform:
  os: linux
  arch: amd64

steps:
  - name: lint
    image: quay.io/sighup/policeman
    pull: always
    environment:
      VALIDATE_TERRAFORM_TERRASCAN: "false"
      # Identifies false positives like missing 'selector'.
      # Doing this is valid for Kustomize patches
      VALIDATE_KUBERNETES_KUBEVAL: "false"
      # Some duplicated code is intended.
      VALIDATE_JSCPD: "false"
      VALIDATE_DOCKERFILE: "false"
      # Disable natural language checks
      VALIDATE_NATURAL_LANGUAGE: "false"
    depends_on:
      - clone

  - name: render
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.20.7_3.8.7_2.4.1
    pull: always
    depends_on:
      - clone
    commands:
      - kustomize build katalog/velero/velero-on-prem > velero.yml

  - name: check-deprecated-apis
    image: us-docker.pkg.dev/fairwinds-ops/oss/pluto:v5
    pull: always
    depends_on:
      - render
    commands:
      # we use --ignore-deprecations because we don't want the CI to fail when the API has not been removed yet.
      - /pluto detect velero.yml --target-versions=k8s=v1.25.0 --ignore-deprecations

---
name: e2e-kubernetes-1.23
kind: pipeline
type: docker

depends_on:
  - policeman

platform:
  os: linux
  arch: amd64

node:
  runner: internal

trigger:
  ref:
    include:
      - refs/heads/main
      - refs/heads/master
      - refs/heads/release-v*
      - refs/tags/**

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-123
      pipeline_id: cluster-123
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - bats -t katalog/tests/velero/velero-install.sh

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
      - bats -t katalog/tests/velero/velero-backup-with-restic-test.sh

  - name: init-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: dr-123-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: dr-123-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-123-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd examples/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-123-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k123a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.2.2_2.16.1_1.9.4_1.23.0_3.8.7_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-123
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k123a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-123
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
name: e2e-kubernetes-1.24
kind: pipeline
type: docker

depends_on:
  - policeman

platform:
  os: linux
  arch: amd64

node:
  runner: internal

trigger:
  ref:
    include:
      - refs/heads/main
      - refs/heads/master
      - refs/heads/release-v*
      - refs/tags/**

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-124
      pipeline_id: cluster-124
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - bats -t katalog/tests/velero/velero-install.sh

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
      - bats -t katalog/tests/velero/velero-backup-with-restic-test.sh

  - name: init-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: dr-124-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: dr-124-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-124-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd examples/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-124-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k124a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.7.0_3.1.1_1.9.4_1.24.1_3.8.7_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-124
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k124a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-124
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
name: e2e-kubernetes-1.25
kind: pipeline
type: docker

depends_on:
  - policeman

platform:
  os: linux
  arch: amd64

node:
  runner: internal

trigger:
  ref:
    include:
      - refs/heads/main
      - refs/heads/master
      - refs/heads/release-v*
      - refs/tags/**

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.25.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-125
      pipeline_id: cluster-125
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password

  - name: test-install
    # KUBECTL 1.25.3 - KUSTOMIZE 3.5.3 - HELM 3.1.1 - YQ 4.21.1 - ISTIOCTL 1.9.4 - FURYCTL 0.9.0 - BATS 1.1.0
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - bats -t katalog/tests/velero/velero-install.sh

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
      - bats -t katalog/tests/velero/velero-backup-with-restic-test.sh

  - name: init-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: dr-125-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: dr-125-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-125-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd examples/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-125-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k125a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.9.0_3.1.1_1.9.4_1.25.3_3.5.3_4.21.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-125
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k125a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-125
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
name: e2e-kubernetes-1.26
kind: pipeline
type: docker

depends_on:
  - policeman

platform:
  os: linux
  arch: amd64

node:
  runner: internal

trigger:
  ref:
    include:
      - refs/heads/main
      - refs/heads/master
      - refs/heads/release-v*
      - refs/tags/**

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.26.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-126
      pipeline_id: cluster-126
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - bats -t katalog/tests/velero/velero-install.sh

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
      - bats -t katalog/tests/velero/velero-backup-with-restic-test.sh

  - name: init-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: dr-126-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-aws
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: dr-126-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-126-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd examples/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-gcp
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS:
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: dr-126-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd examples/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}-${CI_BUILD_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k126a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
      - terraform output -raw cloud_credentials > /shared/cloud_credentials.yaml
      - terraform output -raw volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output -raw backup_storage_location > /shared/backup_storage_location.yaml

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - kubectl apply -f /shared/cloud_credentials.yaml -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
      - sleep 30 # wait for velero to restart
      - kubectl get pods -n kube-system

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.12.0_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-126
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh

  - name: destroy-azure
    image: hashicorp/terraform:1.4.6
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k126a
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd examples/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}${CI_BUILD_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v1.24.1
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-126
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
      vsphere_server:
        from_secret: vsphere_server
      vsphere_password:
        from_secret: vsphere_password
      vsphere_user:
        from_secret: vsphere_user
      dockerhub_username:
        from_secret: dockerhub_username
      dockerhub_password:
        from_secret: dockerhub_password
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
name: release
kind: pipeline
type: docker

depends_on:
  - e2e-kubernetes-1.23
  - e2e-kubernetes-1.24
  - e2e-kubernetes-1.25
  - e2e-kubernetes-1.26

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: prepare-canonical-json
    image: registry.sighup.io/poc/fury-repo-automations:v0.0.3
    pull: always
    depends_on: [ clone ]
    commands:
      - spock module-json -m=fury-kubernetes-dr -r=False -v=${DRONE_TAG}
    when:
      ref:
        include:
          - refs/tags/**

  - name: prepare-tar-gz
    image: alpine:latest
    pull: always
    depends_on: [ clone ]
    commands:
      - tar -zcvf fury-kubernetes-dr-${DRONE_TAG}.tar.gz katalog/ LICENSE README.md
    when:
      ref:
        include:
          - refs/tags/**

  - name: prepare-release-notes
    image: quay.io/sighup/fury-release-notes-plugin:3.7_2.8.4
    pull: always
    depends_on: [ clone ]
    settings:
      release_notes_file_path: release-notes.md
    when:
      ref:
        include:
          - refs/tags/**

  - name: publish-prerelease
    image: plugins/github-release
    pull: always
    depends_on:
      - prepare-canonical-json
      - prepare-tar-gz
      - prepare-release-notes
    settings:
      api_key:
        from_secret: github_token
      file_exists: overwrite
      files:
        - fury-kubernetes-dr-${DRONE_TAG}.tar.gz
        - fury-kubernetes-dr-canonical-definition-${DRONE_TAG}.tar.gz
      prerelease: true
      overwrite: true
      title: "Preview ${DRONE_TAG}"
      note: release-notes.md
      checksum:
        - md5
        - sha256
    when:
      ref:
        include:
          - refs/tags/v**-rc**

  - name: publish-stable
    image: plugins/github-release
    pull: always
    depends_on:
      - prepare-canonical-json
      - prepare-tar-gz
      - prepare-release-notes
    settings:
      api_key:
        from_secret: github_token
      file_exists: overwrite
      files:
        - fury-kubernetes-dr-${DRONE_TAG}.tar.gz
        - fury-kubernetes-dr-canonical-definition-${DRONE_TAG}.tar.gz
      prerelease: false
      overwrite: true
      title: "Release ${DRONE_TAG}"
      note: release-notes.md
      checksum:
        - md5
        - sha256
    when:
      ref:
        exclude:
          - refs/tags/v**-rc**
        include:
          - refs/tags/v**
